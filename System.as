package  {	import flash.geom.Point;	import flash.display.MovieClip;	import flash.geom.Vector3D;	public class System {		public var allPoints:Array		public var allConnections:Array;				public function System() {			allPoints = new Array();			allConnections = new Array();		}				public function addPoint(p:PointMass):void {			allPoints.push(p);		}				public function addLink(c:Connection):void {			//first add points if they aren't already in the system			var points = c.getPoints();			if(allPoints.indexOf(points[0]) < 0) addPoint(points[0]);			if(allPoints.indexOf(points[1]) < 0) addPoint(points[1]);			//now add the connection			allConnections.push(c);		}				public function updateAll():void {			for (var i = 0; i < allConnections.length; i++) {				allConnections[i].spring();			}			for (i = 0; i < allPoints.length; i++) {				allPoints[i].flush();			}		}				public function drift(force:Vector3D):void {			for (var i = 0; i < allPoints.length; i++){				allPoints[i].addForce(force);			}		}				public function disp(dispClip:MovieClip, alsoClear:Boolean = true):void {			dispClip.graphics.clear();			for (var i = 0; i < allConnections.length; i++) {				allConnections[i].disp(dispClip, true)			}		}				public function contain(minX:Number, minY:Number, maxX:Number, maxY:Number, wallFriction:Number = 0){			for (var i = 0; i < allPoints.length; i++){				var pt:PointMass = allPoints[i];				if(pt.pos.x < minX) {					pt.pos.x = minX;					pt.vel.x = 0;					pt.addForce(new Vector3D(0,-pt.vel.y*wallFriction));				}				else if(pt.pos.x > maxX) {					pt.pos.x = maxX;					pt.vel.x = 0;					pt.addForce(new Vector3D(0,-pt.vel.y*wallFriction));				}				if(pt.pos.y < minY) {					pt.pos.y = minX;					pt.vel.y = 0;					pt.addForce(new Vector3D(-pt.vel.x*wallFriction,0));				}				else if(pt.pos.y > maxY){					pt.pos.y = maxY;					pt.vel.y = 0;					pt.addForce(new Vector3D(-pt.vel.x*wallFriction,0));				}			}		}	}}