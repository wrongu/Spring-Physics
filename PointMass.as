package  {	import flash.geom.Point;	import flash.geom.Vector3D;	import flash.display.MovieClip;	public class PointMass{		public var pos:Point;		public var mass:Number;		// velocity and force accumulator are Vector3D where z=0. used as 2D vectors.		//	in theory using Vector3D makes this code easily extendable to 3D simulation		public var vel:Vector3D;		private var forceAcc:Vector3D;		// friction should probably be static.. meh.		public var friction:Number;				public function PointMass(m:Number = 1, sp:Point = null) {			mass = m;			pos = sp;			vel = new Vector3D();			forceAcc = new Vector3D();			friction = .99; // I know, I know..		}				public function addForce(fPlus:Vector3D):void {			forceAcc = forceAcc.add(fPlus)		}				public function flush():void {			//having accumulated all forces and updated things, "flush" out new point at once			// newton's laws: ∆v = a,  a = f * 1/m; 			forceAcc.scaleBy(1/mass)			vel = vel.add(forceAcc); 			vel.scaleBy(friction);						// update position from new velocity which was just updated from forces.			pos.x += vel.x;			pos.y += vel.y;			//reset all forces to zero			forceAcc = new Vector3D();		}				public function disp(dispClip:MovieClip, c:uint = 0x000000, scale:Number = 1):void {			// displayed as a circle where area proportional to mass.			dispClip.graphics.beginFill(c);			// area of circle = pi * radius^2			// 	by setting radius proportional to sqrt(mass), 			//	it makes area proportional to mass. 			dispClip.graphics.drawCircle(pos.x, pos.y, scale * Math.sqrt(mass));			dispClip.graphics.endFill();		}	}	}