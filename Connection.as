package {	import fl.motion.Color;	import flash.display.MovieClip;	import flash.geom.Vector3D;	public class Connection	{		// two points involved: p and q		// spring between them has weight k and rest length l		private var p:PointMass;		private var q:PointMass;		private var k:Number;		private var l:Number;		public function Connection(point1:PointMass,point2:PointMass, idealLength:Number = 0, weight:Number = 0.01)		{			p = point1;			q = point2;			l = idealLength;			k = weight;		}				public function spring():void {			// vector from p to q;			var dx = q.pos.x - p.pos.x;			var dy = q.pos.y - p.pos.y;			var dist = Math.sqrt(dx*dx + dy*dy);			var offsetScale = (l - dist) / dist;			dx *= offsetScale;			dy *= offsetScale;			var fx = k*dx;			var fy = k*dy;			p.addForce(new Vector3D(-fx/p.mass,-fy/p.mass));			q.addForce(new Vector3D(fx/q.mass,fy/q.mass));		}				public function getPoints():Array {			return new Array(p,q);		}		public function disp(dispClip:MovieClip,dispPoints:Boolean = false):void		{			dispClip.graphics.lineStyle(0x000000,1);			dispClip.graphics.moveTo(p.pos.x,p.pos.y);			dispClip.graphics.lineTo(q.pos.x,q.pos.y);			if(dispPoints) {				dispClip.graphics.beginFill(0x000000);				dispClip.graphics.drawCircle(p.pos.x,p.pos.y,Math.sqrt(p.mass));				dispClip.graphics.drawCircle(q.pos.x,q.pos.y,Math.sqrt(q.mass));				dispClip.graphics.endFill();			}		}	}}